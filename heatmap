library(dplyr)
library(readxl)
library(ggplot2)
library(grid)
library(gtable)
library(gridExtra)
library(grid)
library(lattice)
library(tidyr)
library(scales)
library(extrafont)

### Heatmap of the associations between individual metabolites, and the self-reported healthy lifestyle score and its components

data_heatmap1 <- merge(lifestyle_coefficients, full_score[,c("Metabolite","Beta.mod2", "p.value.mod2", "p.value.mod2.bon")], by.x="Metabolite", by.y ="Metabolite", all.x=T)
colnames(data_heatmap1) 
names(data_heatmap1)[names(data_heatmap1) == "Beta.mod2"] <- "lifestyle_coeff2"
names(data_heatmap1)[names(data_heatmap1) == "p.value.mod2"] <- "lifestyle_pval2"
names(data_heatmap1)[names(data_heatmap1) == "p.value.mod2.bon"] <- "lifestyle_pval2bon"

data_heatmap3 <- merge(data_heatmap1, bmi_score[,c("Metabolite","OR.mod2", "p.value.mod2", "p.value.mod2.bon")], by.x="Metabolite", by.y ="Metabolite", all.x=T)
colnames(data_heatmap3) 
names(data_heatmap3)[names(data_heatmap3) == "OR.mod2"] <- "bmi_coeff2"
names(data_heatmap3)[names(data_heatmap3) == "p.value.mod2"] <- "bmi_pval2"
names(data_heatmap3)[names(data_heatmap3) == "p.value.mod2.bon"] <- "bmi_pval2bon"

data_heatmap4 <- merge(data_heatmap3, diet_score[,c("Metabolite","OR.mod2", "p.value.mod2", "p.value.mod2.bon")], by.x="Metabolite", by.y ="Metabolite", all.x=T)
colnames(data_heatmap4) 
names(data_heatmap4)[names(data_heatmap4) == "OR.mod2"] <- "diet_coeff2"
names(data_heatmap4)[names(data_heatmap4) == "p.value.mod2"] <- "diet_pval2"
names(data_heatmap4)[names(data_heatmap4) == "p.value.mod2.bon"] <- "diet_pval2bon"

data_heatmap2 <- merge(data_heatmap4, alco_score[,c("Metabolite","OR.mod2", "p.value.mod2", "p.value.mod2.bon")], by.x="Metabolite", by.y ="Metabolite", all.x=T)
colnames(data_heatmap2) 
names(data_heatmap2)[names(data_heatmap2) == "OR.mod2"] <- "alco_coeff2"
names(data_heatmap2)[names(data_heatmap2) == "p.value.mod2"] <- "alco_pval2"
names(data_heatmap2)[names(data_heatmap2) == "p.value.mod2.bon"] <- "alco_pval2bon"

data_heatmap5 <- merge(data_heatmap2, pal_score[,c("Metabolite","OR.mod2", "p.value.mod2", "p.value.mod2.bon")], by.x="Metabolite", by.y ="Metabolite", all.x=T)
colnames(data_heatmap5) 
names(data_heatmap5)[names(data_heatmap5) == "OR.mod2"] <- "pal_coeff2"
names(data_heatmap5)[names(data_heatmap5) == "p.value.mod2"] <- "pal_pval2"
names(data_heatmap5)[names(data_heatmap5) == "p.value.mod2.bon"] <- "pal_pval2bon"

data_heatmap6 <- merge(data_heatmap5, smoke_score[,c("Metabolite","OR.mod2", "p.value.mod2", "p.value.mod2.bon")], by.x="Metabolite", by.y ="Metabolite", all.x=T)
colnames(data_heatmap6) 
names(data_heatmap6)[names(data_heatmap6) == "OR.mod2"] <- "smoke_coeff2"
names(data_heatmap6)[names(data_heatmap6) == "p.value.mod2"] <- "smoke_pval2"
names(data_heatmap6)[names(data_heatmap6) == "p.value.mod2.bon"] <- "smoke_pval2bon"

#### Merge with metabolite names
data_heatmap_final <- merge(data_heatmap6, met_names[,c("HMDB", "rep", "name", "cate")], by.x="Metabolite", by.y ="HMDB", all.x=T)


#### Heatmap using GGPLOT ####

pval_heatmap <- data_heatmap_final[,c(1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 21, 22, 23)]

# put 1 to the non-corrected pvalues below 0.05
pval_heatmap$lifestyle_star_pval=ifelse(pval_heatmap$lifestyle_pval2<=0.05,1,0)
pval_heatmap$bmi_star_pval=ifelse(pval_heatmap$bmi_pval2<=0.05,1,0)
pval_heatmap$diet_star_pval=ifelse(pval_heatmap$diet_pval2<=0.05,1,0)
pval_heatmap$alco_star_pval=ifelse(pval_heatmap$alco_pval2<=0.05,1,0)
pval_heatmap$pal_star_pval=ifelse(pval_heatmap$pal_pval2<=0.05,1,0)
pval_heatmap$smoke_star_pval=ifelse(pval_heatmap$smoke_pval2<=0.05,1,0)

# put 1 to the Bonferroni corrected pvalues below 0.05
pval_heatmap$lifestyle_star_bon=ifelse(pval_heatmap$lifestyle_pval2bon<=0.05,1,0)
pval_heatmap$bmi_star_bon=ifelse(pval_heatmap$bmi_pval2bon<=0.05,1,0)
pval_heatmap$diet_star_bon=ifelse(pval_heatmap$diet_pval2bon<=0.05,1,0)
pval_heatmap$alco_star_bon=ifelse(pval_heatmap$alco_pval2bon<=0.05,1,0)
pval_heatmap$pal_star_bon=ifelse(pval_heatmap$pal_pval2bon<=0.05,1,0)
pval_heatmap$smoke_star_bon=ifelse(pval_heatmap$smoke_pval2bon<=0.05,1,0)

# add the two together to identify those who have both pvalues significant (remained significant even after Bonferroni correction = **)
pval_heatmap$lifestyle_star=pval_heatmap$lifestyle_star_bon+pval_heatmap$lifestyle_star_pval
pval_heatmap$bmi_star=pval_heatmap$bmi_star_bon+pval_heatmap$bmi_star_pval
pval_heatmap$diet_star=pval_heatmap$diet_star_bon+pval_heatmap$diet_star_pval
pval_heatmap$alco_star=pval_heatmap$alco_star_bon+pval_heatmap$alco_star_pval
pval_heatmap$pal_star=pval_heatmap$pal_star_bon+pval_heatmap$pal_star_pval
pval_heatmap$smoke_star=pval_heatmap$smoke_star_bon+pval_heatmap$smoke_star_pval

pval_bon <- pval_heatmap[,c(16, 30:35)]
pval_bon$pvalweight=3000
pval_bon <- pval_bon[,c(1, 8, 2:7)]
colnames(pval_bon) = c("Metabolite","Weight", "Healthy lifestyle score", "Normal BMI", "Healthy diet", "Moderate alcohol", "Physical activity", "Never smoking")


estimate <- data_heatmap_final[,c(22, 2:3, 6, 9, 12, 15, 18)]
estimate$lifestyle_coef_numeric <- round(estimate$lifestyle_coef_numeric, 4)
colnames(estimate) = c("Metabolite","Weight", "Healthy lifestyle score", "Normal BMI", "Healthy diet", "Moderate alcohol", "Physical activity", "Never smoking")

Order <- order(estimate$`Weight`)
estimate <- estimate[Order,]
pval_bon <- pval_bon[Order,]

# Extract the weights to keep them for labeling
enet_weights <- estimate[,c(1:2)]
colnames(enet_weights) = c("Metabolite","Unscaled_weight")

# Scale values to be able to apply color following the same scale

scaled_estimate <- scale(estimate[,c(2:8)])

full_estimate <- cbind(enet_weights, scaled_estimate)

# estimate_long <- gather(full_estimate, Factor, Estimate, Weight:Smoking, factor_key=TRUE)
full_estimate <- full_estimate[,c(1, 3:9)]

# pval_long <- gather(pval_bon, Factor, Pvalue, Weight:Smoking, factor_key=TRUE)

library(reshape)
estimate_melt <- melt(full_estimate)
pval_bon_melt <- melt(pval_bon)
enet_weights_melt <- melt(enet_weights)


estimate_melt$stars = ""
estimate_melt$stars[which(pval_bon_melt$value==1)] = "*"
estimate_melt$stars[which(pval_bon_melt$value==2)] = "**"
estimate_melt$stars[which(pval_bon_melt$value>=3000)] = paste(enet_weights_melt$value)

## Create heatmap with ggplot
estimate_melt$Metabolite = factor(estimate_melt$Metabolite, levels = estimate$Metabolite)
range(estimate_melt$value)

colours <- c("#0046FF", "#5876FF", "#7F97FF", "#A9B9FF", "#D4DBFF", "#FFFFFF", "#FFE9F3","#FFB0D6", "#FF7FBC","#FF5AA8","#FF2F92")

plot <- ggplot(data = estimate_melt, aes(x = variable, y = Metabolite, fill = value)) + #data and lables
                geom_tile(color = "white", linewidth = 1) + 
                # facet_grid(cols=vars(Factor)) + # try to segment plot by column; change set for factor
                scale_fill_gradientn(limits=range(-4, 4), colours=colours) + #make it symmetrical on both sides for colors to match orientation of associations
                geom_text(aes(x = variable, y = Metabolite, label=stars), 
                              color="black", 
                              size=6, 
                              nudge_x = 0, 
                              nudge_y = 0) +
                theme_minimal()+ # minimal theme
                theme(text = element_text(family = "Arial", size=16)) +
                theme(axis.text.y = element_text(angle = 0, 
                                                vjust = 0.5, 
                                                size = 18, 
                                                face = "bold", 
                                                colour = "black"), 
                      axis.text.x = element_text(angle = 90, 
                                                vjust = 0.5, 
                                                hjust=0.05,
                                                size = 18, 
                                                face = "bold", 
                                                colour = "black"),
                      axis.title = element_blank(),
                      legend.title = element_text(size=18), 
                      legend.text = element_blank(),
                      legend.key.height = unit(0.5, 'cm'),
                      legend.key.width = unit(1.5, 'cm')) +
                      scale_x_discrete(position = "top") +
                theme(strip.text.y = element_text(angle = 0, 
                                                  hjust = 0, 
                                                  vjust = 0.5, 
                                                  face = "bold", 
                                                  size = 20), 
                                                  legend.position="bottom")+
                guides(fill=guide_colorbar(title = "Negative            Positive",
                                          title.position = "top",
                                          nrow = 2, 
                                          label.position = "bottom"))

title_grob <- textGrob(
  label = "Figure 1",
  x = unit(0, "lines"), 
  y = unit(0, "lines"),
  hjust = -0.2, vjust = 0,
  gp = gpar(fontsize = 20))

plot_final <- arrangeGrob(plot, top = title_grob)
